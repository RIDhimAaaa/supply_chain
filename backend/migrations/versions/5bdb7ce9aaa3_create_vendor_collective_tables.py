"""Create vendor collective tables

Revision ID: 5bdb7ce9aaa3
Revises: 
Create Date: 2025-07-26 16:06:54.516152

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5bdb7ce9aaa3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('cart_items_vendor_id_product_id_is_finalized_key'), 'cart_items', type_='unique')
    op.drop_index(op.f('idx_cart_items_is_finalized'), table_name='cart_items')
    op.drop_index(op.f('idx_cart_items_product_id'), table_name='cart_items')
    op.drop_index(op.f('idx_cart_items_vendor_id'), table_name='cart_items')
    op.drop_constraint(op.f('cart_items_vendor_id_fkey'), 'cart_items', type_='foreignkey')
    op.drop_constraint(op.f('cart_items_product_id_fkey'), 'cart_items', type_='foreignkey')
    op.create_foreign_key(None, 'cart_items', 'profiles', ['vendor_id'], ['id'])
    op.create_foreign_key(None, 'cart_items', 'products', ['product_id'], ['id'])
    op.drop_constraint(op.f('deals_product_id_threshold_key'), 'deals', type_='unique')
    op.drop_index(op.f('idx_deals_is_active'), table_name='deals')
    op.drop_index(op.f('idx_deals_product_id'), table_name='deals')
    op.drop_index(op.f('idx_deals_threshold'), table_name='deals')
    op.drop_constraint(op.f('deals_product_id_fkey'), 'deals', type_='foreignkey')
    op.create_foreign_key(None, 'deals', 'products', ['product_id'], ['id'])
    op.alter_column('products', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'unit',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'img_emoji',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_products_is_available'), table_name='products')
    op.drop_index(op.f('idx_products_name'), table_name='products')
    op.drop_index(op.f('idx_products_supplier_id'), table_name='products')
    op.drop_constraint(op.f('products_supplier_id_fkey'), 'products', type_='foreignkey')
    op.create_foreign_key(None, 'products', 'profiles', ['supplier_id'], ['id'])
    op.add_column('profiles', sa.Column('avatar_url', sa.String(), nullable=True))
    op.alter_column('profiles', 'full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('profiles', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('profiles', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('idx_profiles_is_active'), table_name='profiles')
    op.drop_index(op.f('idx_profiles_is_approved'), table_name='profiles')
    op.drop_index(op.f('idx_profiles_role_id'), table_name='profiles')
    op.create_index(op.f('ix_profiles_email'), 'profiles', ['email'], unique=True)
    op.drop_constraint(op.f('profiles_role_id_fkey'), 'profiles', type_='foreignkey')
    op.drop_constraint(op.f('profiles_id_fkey'), 'profiles', type_='foreignkey')
    op.create_foreign_key(None, 'profiles', 'roles', ['role_id'], ['id'])
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('roles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('roles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'profiles', type_='foreignkey')
    op.create_foreign_key(op.f('profiles_id_fkey'), 'profiles', 'users', ['id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.create_foreign_key(op.f('profiles_role_id_fkey'), 'profiles', 'roles', ['role_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_profiles_email'), table_name='profiles')
    op.create_index(op.f('idx_profiles_role_id'), 'profiles', ['role_id'], unique=False)
    op.create_index(op.f('idx_profiles_is_approved'), 'profiles', ['is_approved'], unique=False)
    op.create_index(op.f('idx_profiles_is_active'), 'profiles', ['is_active'], unique=False)
    op.alter_column('profiles', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('profiles', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('profiles', 'full_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('profiles', 'avatar_url')
    op.drop_constraint(None, 'products', type_='foreignkey')
    op.create_foreign_key(op.f('products_supplier_id_fkey'), 'products', 'profiles', ['supplier_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_products_supplier_id'), 'products', ['supplier_id'], unique=False)
    op.create_index(op.f('idx_products_name'), 'products', ['name'], unique=False)
    op.create_index(op.f('idx_products_is_available'), 'products', ['is_available'], unique=False)
    op.alter_column('products', 'img_emoji',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'unit',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'deals', type_='foreignkey')
    op.create_foreign_key(op.f('deals_product_id_fkey'), 'deals', 'products', ['product_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_deals_threshold'), 'deals', ['threshold'], unique=False)
    op.create_index(op.f('idx_deals_product_id'), 'deals', ['product_id'], unique=False)
    op.create_index(op.f('idx_deals_is_active'), 'deals', ['is_active'], unique=False)
    op.create_unique_constraint(op.f('deals_product_id_threshold_key'), 'deals', ['product_id', 'threshold'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'cart_items', type_='foreignkey')
    op.drop_constraint(None, 'cart_items', type_='foreignkey')
    op.create_foreign_key(op.f('cart_items_product_id_fkey'), 'cart_items', 'products', ['product_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('cart_items_vendor_id_fkey'), 'cart_items', 'profiles', ['vendor_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_cart_items_vendor_id'), 'cart_items', ['vendor_id'], unique=False)
    op.create_index(op.f('idx_cart_items_product_id'), 'cart_items', ['product_id'], unique=False)
    op.create_index(op.f('idx_cart_items_is_finalized'), 'cart_items', ['is_finalized'], unique=False)
    op.create_unique_constraint(op.f('cart_items_vendor_id_product_id_is_finalized_key'), 'cart_items', ['vendor_id', 'product_id', 'is_finalized'], postgresql_nulls_not_distinct=False)
    # ### end Alembic commands ###
